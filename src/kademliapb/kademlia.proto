syntax = "proto3";
package kademliapb;

// This service defines the Kademila protocol
service KademliaProtocol {
    // Join requests a node already in Kademlia network to join. This
    // is used by a node wishing to be part of the network.
    rpc Join(JoinNetworkRequest) returns (JoinNetworkResponse) {}

    // Ping is used to probe a node to see if it is alive. If the
    // other node responds, then it is alive, otherwise it might be
    // dead/left the network/cut off from the network
    rpc Ping(PingRequest) returns (PingResponse) {}

    // Store the given key-value pair. If it is successful return
    // the key whose value is stored.
    rpc Store(StoreRequest) returns (StoreResponse) {}

    // For a given ID in the key space find the closest nodes
    rpc FindNode(FindNodeRequest) returns (FindNodeResponse) {}

    // For a given key find the value if it is present.
    rpc FindValue(FindValueRequest) returns (FindValueRequest) {}
}

// This message is sent by the node wishing to join the network. It
// should send its contact information along with it.
message JoinNetworkRequest {
    NodeInfo node_info = 1;
}

// This message is sent by the node which is already in the network
// containing the network-wide configuration containing replication
// factor, concurrency factor and other configuration options.
message JoinNetworkResponse {
    string ip_address = 1;
    uint32 replication_factor = 2;
    uint32 concurrency_factor = 3;
}

// PingRequest is used by a node to probe if the other
// node is alive. The field is not necessary. It is
// understood by the other node that it is just probing
message PingRequest {}

// PingResponse is used by a node to signal to the node
// which sent the PingRequest that it is alive
message PingResponse {}

// StoreRequest is used to store a piece of data in the
// node receiving this request. The data is a key-value pair
message StoreRequest {
    string ip_address = 1;
    string key = 2;
    bytes value = 3;
}

// StoreResponse is used to tell the node sending the
// request to store data that it has successfully stored
// the data with the given key.
message StoreResponse {
    string ip_address = 1;
    uint64 key = 2;
}

// FindNodeRequest is used to find the closest node to the
// given a node_id. 
message FindNodeRequest {
    string ip_address = 1;
    uint64 node_id = 2;
}

// FindNodeResponse is the reply to FindNodeRequest where
// the closest known nodes to the given node_id is returned
message FindNodeResponse {
    string ip_address = 1;
    uint64 node_id = 2;
    repeated NodeInfo closest = 3;
}

// FindValueRequest is used to find value given a key.
message FindValueRequest {
    string ip_address = 1;
    uint64 key = 2;
}

// KeyValueResponse contains the value for the given key.
message KeyValueResponse {
    uint64 key = 1;
    bytes value = 2;
}

// FindValueResponse for a given key is like FindNodeResponse
// when the value for the key is not present in the node. If
// it is present, then it returns key-value pair.
message FindValueResponse {
    string ip_address = 1;
    oneof result {
        KeyValueResponse value = 2;
        FindNodeResponse nearest = 3;
    } 
}

// NodeInfo represents the information required to contact
// a node and measure proximity to some other node with some
// metric. In Kademlia it is Exclusive OR (XOR)
message NodeInfo {
    uint64 node_id = 2;
    string node_address = 1;
    uint32 udp_port = 3;
}